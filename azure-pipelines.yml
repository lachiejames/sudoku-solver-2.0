name: $(Rev:r:)

jobs:
  - job: Install Flutter
    timeoutInMinutes: 10
    pool:
      vmImage: "macOS-latest"

    steps:
      - task: FlutterInstall@0
        displayName: Install Flutter
        inputs:
          channel: stable
          version: latest

      - task: PowerShell@2
        displayName: Setup Environment
        inputs:
          targetType: "inline"
          script: |
            Write-Host "##vso[task.prependpath]$(JAVA_HOME_11_X64)"
            Write-Host "##vso[task.setvariable variable=JAVA_HOME;]$(JAVA_HOME_11_X64)"
            Write-Host "##vso[task.prependpath]$(FlutterToolPath)"
            Write-Host "##vso[task.prependpath]$(FlutterToolPath)/cache/dart-sdk/bin"

      - task: CmdLine@2
        displayName: Install Dependencies
        inputs:
          script: |
            flutter pub get

  - job: Run Tests
    timeoutInMinutes: 10
    pool:
      vmImage: "macOS-latest"
    steps:
      - task: CmdLine@2
        displayName: Unit Tests
        inputs:
          script: |
            flutter test --machine > tests.output

      - task: CmdLine@2
        displayName: Setup emulator
        inputs:
          script: |
            echo "Installing Emulator SDK"
            $ANDROID_HOME/tools/bin/sdkmanager --install 'system-images;android-29;default;x86'

            echo "Creating Emulator"
            $ANDROID_HOME/tools/bin/avdmanager create avd -n "pixel" --device "pixel" -k "system-images;android-29;default;x86"

            echo "Starting Emulator"
            $ANDROID_HOME/emulator/emulator -avd "pixel" -no-snapshot &
            $ANDROID_HOME/platform-tools/adb wait-for-device shell 'while [[ -z $(getprop sys.boot_completed | tr -d '\r') ]]; do sleep 1; done; input keyevent 82'
            echo "Emulator started"

      - task: CmdLine@2
        displayName: Integration tests
        inputs:
          script: |
            echo "Running Integration Tests"
            flutter drive --target=test_driver/run_app.dart

  - job: Code Quality Analysis
    timeoutInMinutes: 10
    pool:
      vmImage: "macOS-latest"
    steps:
      - task: CmdLine@2
        displayName: Calculate Test Coverage
        inputs:
          script: |
            flutter test --coverage

      - task: SonarQubePrepare@4
        displayName: SonarQube Start
        inputs:
          SonarQube: "sonarqube-flutter"
          scannerMode: "CLI"
          configMode: "file"

      - task: SonarQubeAnalyze@4
        displayName: SonarQube Analysis

      - task: SonarQubePublish@4
        displayName: SonarQube Publish
        inputs:
          pollingTimeoutSec: "300"
